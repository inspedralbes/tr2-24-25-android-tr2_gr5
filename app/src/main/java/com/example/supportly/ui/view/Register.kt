package com.example.supportly.ui.view

import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.IconButton
import androidx.compose.material3.Text
import androidx.compose.material3.TextField
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.text.input.VisualTransformation
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController

//FORMULARIO DE REGISTRO DE MENTOR
@Composable
fun RegisterMentor(navController: NavController) {
    Column(
        modifier = Modifier
            .padding(16.dp)
            .padding(vertical = 100.dp)
            .fillMaxWidth(),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        // T√≠tulo
        Text(
            text = "Registro Mentor",
            style = TextStyle(fontSize = 30.sp, fontWeight = FontWeight.Light),
            modifier = Modifier
                .padding(bottom = 30.dp)

        )
        Text(
            text = "¬øPreparado para Ayudar?",
            style = TextStyle(fontSize = 18.sp, fontWeight = FontWeight.Thin),
            modifier = Modifier.padding(bottom = 32.dp)
        )

        // Lista de campos de texto
        var nom by remember { mutableStateOf("") }
        var emailAlumne by remember { mutableStateOf("") }
        var emailProfesor by remember { mutableStateOf("") }
        var password by remember { mutableStateOf("") }
        var passwordVisible by remember { mutableStateOf(false) }
        var numTlf by remember { mutableStateOf("") }

        listOf(
            "Nombre" to nom,
            "Correo Electr√≥nico" to emailAlumne,
            "Correo Electr√≥nico Tutor Instituto" to emailProfesor,
            "N√∫mero Tel√©fono" to numTlf
        ).forEach { (label, value) ->
            TextField(
                value = value,
                onValueChange = { newValue ->
                    when (label) {
                        "Nombre" -> nom = newValue
                        "Correo Electr√≥nico" -> emailAlumne = newValue
                        "Correo Electr√≥nico Tutor Instituto" -> emailProfesor = newValue
                        "N√∫mero Tel√©fono" -> numTlf = newValue
                    }
                },
                label = { Text(label) },
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 10.dp)
            )
        }

        // Campo de contrase√±a
        TextField(
            value = password,
            onValueChange = { password = it },
            label = { Text("Contrase√±a") },
            placeholder = { Text("Escribe tu contrase√±a") },
            visualTransformation = if (passwordVisible) VisualTransformation.None else PasswordVisualTransformation(),
            trailingIcon = {
                val icon = if (passwordVisible) "üôà" else "üëÅÔ∏è"
                IconButton(onClick = { passwordVisible = !passwordVisible }) {
                    Text(icon)
                }
            },
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 10.dp)
        )

        Spacer(modifier = Modifier.height(16.dp))

        // Bot√≥n de Registro
        Button(
            onClick = { navController.navigate("menuapp")},
            colors = ButtonDefaults.buttonColors(Color.Blue),
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 30.dp, horizontal = 45.dp)
        ) {
            Text(text = "Registrarse como Mentor")
        }
    }
}



//HACER EL FORMULARIO DE REGISTRO DE ALUMNE
@Composable
fun RegisterAlumne(navController: NavController) {
    Column(
        modifier = Modifier
            .padding(16.dp)
            .padding(vertical = 100.dp)
            .fillMaxWidth(),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        // T√≠tulo
        Text(
            text = "Registro Alumno",
            style = TextStyle(fontSize = 30.sp, fontWeight = FontWeight.Light),
            modifier = Modifier.padding(bottom = 16.dp)
        )
        Text(
            text = "¬øPreparado para aprender?",
            style = TextStyle(fontSize = 18.sp, fontWeight = FontWeight.Thin),
            modifier = Modifier.padding(bottom = 32.dp)
        )

        // Lista de campos de texto
        var nombre by remember { mutableStateOf("") }
        var email by remember { mutableStateOf("") }
        var emailTutor by remember { mutableStateOf("") }
        var password by remember { mutableStateOf("") }
        var passwordVisible by remember { mutableStateOf(false) }
        var telefono by remember { mutableStateOf("") }
        var curso by remember { mutableStateOf("") }

        listOf(
            "Nombre" to nombre,
            "Correo Electr√≥nico" to email,
            "Correo Electr√≥nico Tutor" to emailTutor,
            "N√∫mero de Tel√©fono" to telefono,
            "Curso" to curso
        ).forEach { (label, value) ->
            TextField(
                value = value,
                onValueChange = { newValue ->
                    when (label) {
                        "Nombre" -> nombre = newValue
                        "Correo Electr√≥nico" -> email = newValue
                        "Correo Electr√≥nico Tutor" -> emailTutor = newValue
                        "N√∫mero de Tel√©fono" -> telefono = newValue
                        "Curso" -> curso = newValue
                    }
                },
                label = { Text(label) },
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 10.dp)
            )
        }

        // Campo de contrase√±a
        TextField(
            value = password,
            onValueChange = { password = it },
            label = { Text("Contrase√±a") },
            placeholder = { Text("Escribe tu contrase√±a") },
            visualTransformation = if (passwordVisible) VisualTransformation.None else PasswordVisualTransformation(),
            trailingIcon = {
                val icon = if (passwordVisible) "üôà" else "üëÅÔ∏è"
                IconButton(onClick = { passwordVisible = !passwordVisible }) {
                    Text(icon)
                }
            },
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 10.dp)
        )

        Spacer(modifier = Modifier.height(16.dp))

        // Bot√≥n de Registro
        Button(
            onClick = { navController.navigate("menuapp") },
            colors = ButtonDefaults.buttonColors(Color.Blue),
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 30.dp, horizontal = 45.dp)
        ) {
            Text(text = "Registrarse como Alumno")
        }
    }
}
